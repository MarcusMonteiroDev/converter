@Composable
fun ModeloMenu(
    isDropDownExpanded: MutableState<Boolean>,
    itemPosition: MutableState<Int>,
    opcoes: List<String>
) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp)
            .background(
                color = MaterialTheme.colorScheme.surfaceVariant,
                shape = RoundedCornerShape(8.dp)
            )
            .clickable { isDropDownExpanded.value = true }
            .padding(16.dp)
    ) {
        Text(
            text = opcoes[itemPosition.value],
            style = MaterialTheme.typography.bodyLarge,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )

        DropdownMenu(
            expanded = isDropDownExpanded.value,
            onDismissRequest = { isDropDownExpanded.value = false }
        ) {
            opcoes.forEachIndexed { index, item ->
                DropdownMenuItem(
                    text = { Text(text = item) },
                    onClick = {
                        itemPosition.value = index
                        isDropDownExpanded.value = false
                    }
                )
            }
        }
    }
}


-------------------------------------------------------------------------------------------
@Composable
fun AreaScreen(
    modifier: Modifier = Modifier,
    onGoBack: () -> Unit
) {
    val unidades = listOf(
        "Quilômetro quadrado (km²)",
        "Hectare (ha)",
        "Are (a)",
        "Metro quadrado (m²)",
        "Decímetro quadrado (dm²)",
        "Centímetro quadrado (cm²)",
        "Milímetro quadrado (mm²)",
        "Micrômetro quadrado (µm²)",
        "Nanômetro quadrado (nm²)"
    )

    var inputUnidade by remember { mutableStateOf("") }
    val itemPosition1 = remember { mutableStateOf(0) }
    val itemPosition2 = remember { mutableStateOf(1) }

    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Conversor de Área",
            style = MaterialTheme.typography.headlineSmall,
            color = MaterialTheme.colorScheme.primary
        )

        Text(text = "Converter de:")
        ModeloMenu(
            isDropDownExpanded = remember { mutableStateOf(false) },
            itemPosition = itemPosition1,
            opcoes = unidades
        )

        TextField(
            value = inputUnidade,
            onValueChange = { inputUnidade = it },
            label = { Text(text = "Valor") },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            singleLine = true,
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp)
        )

        Text(text = "Para:")
        ModeloMenu(
            isDropDownExpanded = remember { mutableStateOf(false) },
            itemPosition = itemPosition2,
            opcoes = unidades
        )

        Text(
            text = "Resultado:",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(top = 16.dp)
        )

        Text(
            text = convertArea(
                inputUnidade = inputUnidade,
                itemPosition1 = itemPosition1.value,
                itemPosition2 = itemPosition2.value
            ),
            style = MaterialTheme.typography.titleLarge,
            color = MaterialTheme.colorScheme.secondary,
            modifier = Modifier.padding(8.dp)
        )
    }
}
